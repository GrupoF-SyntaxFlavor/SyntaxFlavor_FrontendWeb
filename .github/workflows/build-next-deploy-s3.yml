name: Build and Deploy to S3

on:
  push:
    branches:
      - main
      - develop
      - CarrascoAlejandro
  schedule:
    - cron: '30 3/6 * * *'
  workflow_dispatch:

env:
  NEXT_PUBLIC_BACKEND_URL: http://${{ secrets.DO_DROPLET_IP }}:8080
  NEXT_PUBLIC_MINIO_URL: http://${{ secrets.DO_DROPLET_IP }}:9000
  DH_REPOSITORY: syntaxflavor-frontend-web
  IMAGE_TAG: latest

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.17'
          cache: 'npm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: write env file
        run: |
          echo "NEXT_PUBLIC_BACKEND_URL=$NEXT_PUBLIC_BACKEND_URL" >> .env.local
          echo "NEXT_PUBLIC_MINIO_URL=$NEXT_PUBLIC_MINIO_URL" >> .env.local

      - name: Build project
        run: pnpm build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Sync files to S3
        run: aws s3 sync out s3://${{ secrets.S3_BUCKET }} --delete

      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  deploy-do:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.17'
          cache: 'npm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: write env file
        run: |
          echo "NEXT_PUBLIC_BACKEND_URL=$NEXT_PUBLIC_BACKEND_URL" >> .env.local
          echo "NEXT_PUBLIC_MINIO_URL=$NEXT_PUBLIC_MINIO_URL" >> .env.local

      - name: build the static project
        run: pnpm build

      # Step 2: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t $DH_REPOSITORY:$IMAGE_TAG .

      # Step 3: Tag Docker image
      - name: Tag Docker image
        run: |
          docker tag $DH_REPOSITORY:$IMAGE_TAG ${{ secrets.DOCKERHUB_USERNAME }}/$DH_REPOSITORY:$IMAGE_TAG

      # Step 4 Push to DockerHub
      - name: Push to DockerHub
        run: |
          docker login -u ${{ secrets.DO_USERNAME }} -p ${{ secrets.DO_PASSWORD }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$DH_REPOSITORY:$IMAGE_TAG

      # Step 5: Set up SSH agent and deploy
      - name: Set up SSH agent and deploy
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.DO_DROPLET_KEY }}

      # Step 6: Install SSH key
      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.DO_DROPLET_IP}} >> ~/.ssh/known_hosts

       # Step 7: Deploy via SSH
      - name: Deploy via SSH
        env:
          HOST: root@${{ secrets.DO_DROPLET_IP}}
        run: |
          ssh $HOST 'docker login -u "${{ secrets.DO_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}" &&cd ~/SyntaxFlavor_Backend/digital_ocean && docker compose stop syntaxflavor_backend && docker compose rm -f syntaxflavor_backend && docker compose up -d --force-recreate syntaxflavor_backend'
